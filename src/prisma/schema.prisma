// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../db/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  username         String   @unique
  password         String
  name             String?
  bio              String?
  profilePicture   String?
  profilePictureId String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  refreshToken     String?

  followers Follow[] @relation("Follower")
  following Follow[] @relation("Following")

  posts Post[]
  likes Like[]
  comments Comment[]
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("Follower", fields: [followerId], references: [id])
  following User @relation("Following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Post {
  id        String   @id @default(cuid())
  userId    String
  caption   String?  @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  media     Media[]

  user User @relation(fields: [userId], references: [id])
  likes Like[]
  comments Comment[]

  @@index([userId])
}

model Media {
  id        String   @id @default(cuid())
  postId    String
  url       String
  fileId    String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id])

  @@index([postId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@index([userId])
  @@index([postId])
}